coutns <- read.table("/bicoh/MARGenomics/GitHub/Tutorials/Counts_example.txt", sep = "\t", dec = ".", header = T, stringsAsFactors = F)
head(counts)
counts <- coutns
rm(coutns)
head(counts)
sample.totals <- apply(counts.m, 2, sum)
Annot.RNAseq <- counts[,c(1:6)] # gene information
counts.m <- counts[,7:length(counts)] # Counts
sample.totals <- apply(counts.m, 2, sum) # calculate the sum (total counts) for each sample (each column)
range(sample.totals)
max(sample.totals)/min(sample.totals)
dim(counts.m)
keep <- rowSums(counts.m>10) >= 2
counts.m.f <- counts.m[keep,]
dim(counts.m.f)
all.equal(rownames(counts.m.f), annot.m.f$Geneid)
annot.m.f <- Annot.RNAseq[match(rownames(counts.m.f), Annot.RNAseq$Geneid),]
all.equal(rownames(counts.m.f), annot.m.f$Geneid)
Annot.RNAseq$Geneid
annot.m.f
counts.m
counts.m = counts[,7:length(counts)]
counts.m <- counts.m[,colnames(counts.m) %in% targets$Sample] # remove sample DK3829
sample.totals<-apply(counts.m,2,sum)
range(sample.totals)
max(sample.totals)/min(sample.totals)# 1.177164
#############################
# Filtering
dim(counts.m)# 56791    10
table(targets$Condition)
keep <- rowSums(counts.m>10) >= 2 #haur√≠em de filtrar per com a minim 10 counts en 2 mostres (2 es correspon a la n del grup mes petit, control).
counts.m.f <- counts.m[keep,] # filter counts table
dim(counts.m.f)
rownames(counts.m.f)
counts.m.f
head(counts)
rownames(counts) <- counts$Geneid
head(counts, 2)
Annot.RNAseq <- counts[,c(1:6)] # gene information
counts.m <- counts[,7:length(counts)] # Counts
sample.totals <- apply(counts.m, 2, sum) # calculate the sum (total counts) for each sample (each column)
range(sample.totals) # retrieve the range of total counts in samples
[1] 80730737 95226607
max(sample.totals)/min(sample.totals)
keep <- rowSums(counts.m>10) >= 2 # keep those genes with more than 10 counts in 2 or more samples
counts.m.f <- counts.m[keep,] # filter the counts table
dim(counts.m.f) # check the dimensions of the new counts table
annot.m.f <- Annot.RNAseq[match(rownames(counts.m.f), Annot.RNAseq$Geneid),] # filter the annotations table
Annot.RNAseq[match(rownames(counts.m.f), Annot.RNAseq$Geneid),]
annot.m.f <- Annot.RNAseq[match(rownames(counts.m.f), Annot.RNAseq$Geneid),]
all.equal(rownames(counts.m.f), annot.m.f$Geneid) #TRUE
?cpm
library(edgeR)
?DGEList
citation("edgeR")
?calcNormFactors
?cpm
library(edgeR)
d <- DGEList(counts=counts.m.f)
Norm.Factor <- calcNormFactors(d, method="TMM")
cpm.matrx <- cpm(Norm.Factor, log=T, prior.count=3)
cpm.matrx.nonlog <- cpm(Norm.Factor, log=F)
head(counts.m)
targets <-data.frame(colnames(counts.m))
targets
head(counts)
colnames(counts)[12]
colnames(counts)[12] <- "KO_B3"
write.table(counts, file = "/bicoh/MARGenomics/GitHub/Tutorials/Counts_example.txt", sep ="\t", row.names = T, col.names = T, dec = ".")
counts <- read.table(file="path_to_file/Counts_example.txt"), sep="\t", header=T, dec=".", stringsAsFactors = F)
counts <- read.table(file="path_to_file/Counts_example.txt", sep="\t", header=T, dec=".", stringsAsFactors = F)
counts <- read.table("/bicoh/MARGenomics/GitHub/Tutorials/Counts_example.txt", sep = "\t", dec = ".", header = T, stringsAsFactors = F)
head(counts)
counts.m <- counts[,7:length(counts)] # Counts
Annot.RNAseq <- counts[,c(1:6)] # gene information
keep <- rowSums(counts.m>10) >= 2 # keep those genes with more than 10 counts in 2 or more samples
counts.m.f <- counts.m[keep,] # filter the counts table
dim(counts.m.f) # check the dimensions of the new counts table
annot.m.f <- Annot.RNAseq[match(rownames(counts.m.f), Annot.RNAseq$Geneid),] # filter the annotations table
all.equal(rownames(counts.m.f), annot.m.f$Geneid) # check that the gene names are in the same order in the counts and annotation tables
library(edgeR)
d <- DGEList(counts=counts.m.f) # transform table of counts into DGEList
Norm.Factor <- calcNormFactors(d, method="TMM") # compute normalization factors
cpm.matrx <- cpm(Norm.Factor, log=T, prior.count=3) # calculate log2CPM
cpm.matrx.nonlog <- cpm(Norm.Factor, log=F) # calculate CPM
colnames(counts.m)
colnames(counts.m.f)
targets <- data.frame(colnames(counts.m.f))
targets
targets$Condition <- c(rep("KO_A", 3), rep ("KO_B", 3), rep ("WT_A", 3), rep("WT_B", 2))
targets
colnames(targets)[1] <- "Sample"
targets
all.equal(targets$Sample ,colnames(cpm.matrx))
c(rep("KO_A", 3), rep ("KO_B", 3), rep ("WT_A", 3), rep("WT_B", 2))
resultsDir
resultsDir <- "/bicoh/MARGenomics/GitHub/Tutorials/Images"
# DENDROGRAMS
clusterdend(est_noctrls=cpm.matrx[,targets$Sample], conditions=targets$Condition, picname="Condition", resDir=file.path(resultsDir))
library(QualityGraphs)
# DENDROGRAMS
clusterdend(est_noctrls=cpm.matrx[,targets$Sample], conditions=targets$Condition, picname="Condition", resDir=file.path(resultsDir))
library(RColorBrewer)
# DENDROGRAMS
clusterdend(est_noctrls=cpm.matrx[,targets$Sample], conditions=targets$Condition, picname="Condition", resDir=file.path(resultsDir))
# PCAs
makePCA(est_noctrls=cpm.matrx[,targets$Sample], conditions=targets$Condition, picname="Condition", resDir=file.path(resultsDir), dist = 2)
# 2D PCAs
makePCA.2D(est_noctrls=cpm.matrx[,targets$Sample], conditions=targets$Condition, picname="Condition", resDir=file.path(resultsDir), dist = 0)
COLOR <- c('KO_A'='#1b9e77', 'KO_B' = '#d95f02', 'WT_A' = '#67639f', 'WT_B' = '#e7298a')
png(file.path(resultsDir, "MDS_Condition.png"), units="in",  width=12, height=8, res=200)
conditions <- factor(targets$Condition)  #to be used as block-variable
plotMDS(cpm.matrx[,targets$Sample], label=targets$Sample,
col=COLOR[conditions])
legend("topleft", legend=levels(conditions), pch=15, col=COLOR, ncol=1)
dev.off()
COLOR[conditions]
